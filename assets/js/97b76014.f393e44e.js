"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[510],{59150:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new semantic version.","params":[{"name":"major","desc":"The major version if an integer, otherwise the version string.","lua_type":"number | string"},{"name":"minor?","desc":"The minor version.","lua_type":"number"},{"name":"patch?","desc":"The patch version.","lua_type":"number"},{"name":"prerelease?","desc":"The prerelease version.","lua_type":"string"},{"name":"build?","desc":"The build version.","lua_type":"string"}],"returns":[{"desc":"","lua_type":"SemanticVersion"}],"function_type":"static","source":{"line":261,"path":"src/init.luau"}},{"name":"FromReplicatedStorage","desc":"Gets the semantic version from ReplicatedStorage attributes.\\n\\n:::info\\nThe attributes used are `SemVerMajor`, `SemVerMinor`, `SemVerPatch`,\\n`SemVerPrerelease`, and `SemVerBuild`. They are all integers, with\\nthe exception of `SemVerPrerelease` and `SemVerBuild` being optional strings.\\n:::","params":[],"returns":[{"desc":"","lua_type":"SemanticVersion"}],"function_type":"static","source":{"line":311,"path":"src/init.luau"}},{"name":"NextMajor","desc":"Gets the next major version.","params":[],"returns":[{"desc":"","lua_type":"SemanticVersion"}],"function_type":"method","source":{"line":328,"path":"src/init.luau"}},{"name":"NextMinor","desc":"Gets the next minor version.","params":[],"returns":[{"desc":"","lua_type":"SemanticVersion"}],"function_type":"method","source":{"line":336,"path":"src/init.luau"}},{"name":"NextPatch","desc":"Gets the next patch version.","params":[],"returns":[{"desc":"","lua_type":"SemanticVersion"}],"function_type":"method","source":{"line":344,"path":"src/init.luau"}}],"properties":[{"name":"Major","desc":"The major version.","lua_type":"number","readonly":true,"source":{"line":221,"path":"src/init.luau"}},{"name":"Minor","desc":"The minor version.","lua_type":"number","readonly":true,"source":{"line":228,"path":"src/init.luau"}},{"name":"Patch","desc":"The patch version.","lua_type":"number","readonly":true,"source":{"line":235,"path":"src/init.luau"}},{"name":"Prerelease","desc":"The prerelease version.","lua_type":"string?","readonly":true,"source":{"line":243,"path":"src/init.luau"}},{"name":"Build","desc":"The build version.","lua_type":"string?","readonly":true,"source":{"line":250,"path":"src/init.luau"}}],"types":[],"name":"SemanticVersion","desc":"An immutable class for representing semantic versioning.\\n\\nThere are metamethods that are undocumented, so here they are:\\n\\n```lua\\nlocal _ = SemanticVersion.new(\\"1.0.0\\") == SemanticVersion.new(\\"1.0.0\\") -- __eq check\\nlocal _ = SemanticVersion.new(\\"1.0.0\\") < SemanticVersion.new(\\"2.0.0\\") -- __lt check\\nlocal _ = SemanticVersion.new(\\"1.0.0\\") ^ SemanticVersion.new(\\"2.0.0\\") -- pessimistic check\\nlocal _ = tostring(SemanticVersion.new(\\"1.0.0\\"))\\n```\\n\\n:::info\\nPessimistic check is basically the same as the one from Rubygems. It is\\nparticularly useful when you want to ensure compatibility with future\\nminor updates while avoiding potential issues from major version changes.\\n:::","source":{"line":210,"path":"src/init.luau"}}')}}]);