[{"title":"Installation","type":0,"sectionRef":"#","url":"/semantic-version/docs/installation","content":"","keywords":""},{"title":"Method #1 - HttpService​","type":1,"pageTitle":"Installation","url":"/semantic-version/docs/installation#method-1---httpservice","content":"This method uses HttpService to install SemanticVersion. In Roblox Studio, paste the following command into your command bar.Run the following command: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local HttpService = game:GetService(&quot;HttpService&quot;) local HttpEnabled = HttpService.HttpEnabled HttpService.HttpEnabled = true local function RequestAsync(RequestDictionary) return HttpService:RequestAsync(RequestDictionary) end local function GetAsync(Url, Headers) Headers[&quot;cache-control&quot;] = &quot;no-cache&quot; local Success, ResponseDictionary = pcall(RequestAsync, { Headers = Headers; Method = &quot;GET&quot;; Url = Url; }) if not Success then return false, ResponseDictionary end if not ResponseDictionary.Success then return false, string.format(&quot;HTTP %*: %*&quot;, ResponseDictionary.StatusCode, ResponseDictionary.StatusMessage) end return ResponseDictionary.Body end local function Initify(Root) local InitFile = Root:FindFirstChild(&quot;init&quot;) or Root:FindFirstChild(&quot;init.lua&quot;) or Root:FindFirstChild(&quot;init.client.lua&quot;) or Root:FindFirstChild(&quot;init.server.lua&quot;) or Root:FindFirstChild(&quot;init.luau&quot;) or Root:FindFirstChild(&quot;init.client.luau&quot;) or Root:FindFirstChild(&quot;init.server.luau&quot;) if InitFile then InitFile.Name = Root.Name InitFile.Parent = Root.Parent for _, Child in Root:GetChildren() do Child.Parent = InitFile end Root:Destroy() Root = InitFile end for _, Child in Root:GetChildren() do Initify(Child) end return Root end local FilesList = HttpService:JSONDecode(assert(GetAsync( &quot;https://api.github.com/repos/bura-games/semantic-version/contents/src&quot;, {accept = &quot;application/vnd.github.v3+json&quot;} ))) local SemanticVersion = Instance.new(&quot;Folder&quot;) SemanticVersion.Name = &quot;SemanticVersion&quot; for _, FileData in FilesList do local ModuleScript = Instance.new(&quot;ModuleScript&quot;) ModuleScript.Name = tostring(string.match(FileData.name, &quot;(%w+)%.lua&quot;) or string.match(FileData.name, &quot;(%w+)%.luau&quot;)) local Success, Source = GetAsync(FileData.download_url, {}) if not Success then ModuleScript.Source = string.format(&quot;-- %*&quot;, tostring(Source)) else ModuleScript.Source = tostring(Success) end ModuleScript.Parent = SemanticVersion end SemanticVersion.Parent = ReplicatedStorage Initify(SemanticVersion) HttpService.HttpEnabled = HttpEnabled "},{"title":"Method 2 - Wally​","type":1,"pageTitle":"Installation","url":"/semantic-version/docs/installation#method-2---wally","content":"Setup Wally by using wally init.Add howmanysmall/semantic-version as a dependency. [dependencies] SemanticVersion = &quot;howmanysmall/semantic-version@^1.0.0&quot;  "},{"title":"Next​","type":1,"pageTitle":"Installation","url":"/semantic-version/docs/installation#next","content":"Now, check out the API reference! "},{"title":"Getting Started with SemanticVersion","type":0,"sectionRef":"#","url":"/semantic-version/docs/intro","content":"Getting Started with SemanticVersion Here are some quick links to get started using SemanticVersion: Installation guideAPI Docs","keywords":""},{"title":"SemanticVersion","type":0,"sectionRef":"#","url":"/semantic-version/api/SemanticVersion","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"SemanticVersion","url":"/semantic-version/api/SemanticVersion#properties","content":" "},{"title":"Major​","type":1,"pageTitle":"SemanticVersion","url":"/semantic-version/api/SemanticVersion#Major","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; SemanticVersion.Major: number The major version.  "},{"title":"Minor​","type":1,"pageTitle":"SemanticVersion","url":"/semantic-version/api/SemanticVersion#Minor","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; SemanticVersion.Minor: number The minor version.  "},{"title":"Patch​","type":1,"pageTitle":"SemanticVersion","url":"/semantic-version/api/SemanticVersion#Patch","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; SemanticVersion.Patch: number The patch version.  "},{"title":"Prerelease​","type":1,"pageTitle":"SemanticVersion","url":"/semantic-version/api/SemanticVersion#Prerelease","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; SemanticVersion.Prerelease: string? The prerelease version.  "},{"title":"Build​","type":1,"pageTitle":"SemanticVersion","url":"/semantic-version/api/SemanticVersion#Build","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; SemanticVersion.Build: string? The build version. "},{"title":"Functions​","type":1,"pageTitle":"SemanticVersion","url":"/semantic-version/api/SemanticVersion#functions","content":" "},{"title":"new​","type":1,"pageTitle":"SemanticVersion","url":"/semantic-version/api/SemanticVersion#new","content":"&lt;/&gt; SemanticVersion.new( major: number | string,-- The major version if an integer, otherwise the version string. minor?: number,-- The minor version. patch?: number,-- The patch version. prerelease?: string,-- The prerelease version. build?: string-- The build version. ) → SemanticVersion Creates a new semantic version.  "},{"title":"FromReplicatedStorage​","type":1,"pageTitle":"SemanticVersion","url":"/semantic-version/api/SemanticVersion#FromReplicatedStorage","content":"&lt;/&gt; SemanticVersion.FromReplicatedStorage() → SemanticVersion Gets the semantic version from ReplicatedStorage attributes. info The attributes used are SemVerMajor, SemVerMinor, SemVerPatch, SemVerPrerelease, and SemVerBuild. They are all integers, with the exception of SemVerPrerelease and SemVerBuild being optional strings.  "},{"title":"NextMajor​","type":1,"pageTitle":"SemanticVersion","url":"/semantic-version/api/SemanticVersion#NextMajor","content":"&lt;/&gt; SemanticVersion:NextMajor() → SemanticVersion Gets the next major version.  "},{"title":"NextMinor​","type":1,"pageTitle":"SemanticVersion","url":"/semantic-version/api/SemanticVersion#NextMinor","content":"&lt;/&gt; SemanticVersion:NextMinor() → SemanticVersion Gets the next minor version.  "},{"title":"NextPatch​","type":1,"pageTitle":"SemanticVersion","url":"/semantic-version/api/SemanticVersion#NextPatch","content":"&lt;/&gt; SemanticVersion:NextPatch() → SemanticVersion Gets the next patch version. "}]